package chip8

import (
  "fmt"
)


// Datatype for the chip8 structure

type Chip8 struct {

  // OPCODE
  opcode uint16;


  // MEMORY

  memory [4096] uint8;


  // REGISTER

  V [16] uint8;

// INDEX AND PROGRAM COUNTER

  I uint8;
  pc uint8;

// GRAPHICS OUTPUT

  gfx [64][32] uint8;

// TIMERS

  delay_timer uint8;
  sound_timer uint8;

// STACK

  stack [16] uint16;
  sp uint16;

// KEYPAD

  key [16] uint8;

// PKG TEST


}



// INIT METHOD
func (c *Chip8) Init() {

  fmt.Printf("Initializing...\n")

  // Golang automaticaly should set all vars to 0 when declared.

  c.sp = 0x200;

  for i := 0; i < 80; i++ {
    c.memory[i] =
  }

}

// EMU CYCLE

func (c *Chip8) EmuCycle() {

  fmt.Printf("Emulating one Cycle...\n")

}



// CHIPS8_FONTSET

var fontset = [80]uint16{
  0xF0, 0x90, 0x90, 0x90, 0xF0, // 0
  0x20, 0x60, 0x20, 0x20, 0x70, // 1
  0xF0, 0x10, 0xF0, 0x80, 0xF0, // 2
  0xF0, 0x10, 0xF0, 0x10, 0xF0, // 3
  0x90, 0x90, 0xF0, 0x10, 0x10, // 4
  0xF0, 0x80, 0xF0, 0x10, 0xF0, // 5
  0xF0, 0x80, 0xF0, 0x90, 0xF0, // 6
  0xF0, 0x10, 0x20, 0x40, 0x40, // 7
  0xF0, 0x90, 0xF0, 0x90, 0xF0, // 8
  0xF0, 0x90, 0xF0, 0x10, 0xF0, // 9
  0xF0, 0x90, 0xF0, 0x90, 0x90, // A
  0xE0, 0x90, 0xE0, 0x90, 0xE0, // B
  0xF0, 0x80, 0x80, 0x80, 0xF0, // C
  0xE0, 0x90, 0x90, 0x90, 0xE0, // D
  0xF0, 0x80, 0xF0, 0x80, 0xF0, // E
  0xF0, 0x80, 0xF0, 0x80, 0x80  // F
};
